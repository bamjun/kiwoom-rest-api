# gitcommit message
- **Feat**: Implement new feature  
- **Add**: Add asset files  
- **Fix**: Fix bugs  
- **Docs**: Add or update documentation  
- **Style**: Styling work (no code logic changes)  
- **Refactor**: Code refactoring (no functional changes)  
- **Test**: Add or modify tests  
- **Deploy**: Deployment-related changes  
- **Conf**: Build or environment configuration  
- **Chore**: Miscellaneous tasks  

Write the first line of the commit message in under 30 characters, and add detailed information from the next line.

```example1
[feat] new feature
- new feature description
- new feature description
- new feature description
```

```example2
[fix] fix bug
- fix bug description
- fix bug description
- fix bug description
```

```example3
[refactor] refactor code
- refactor code description
- refactor code description
- refactor code description
```

```example4
[test] add test
- add test description
- add test description
- add test description
```

```example5
[docs] add docs
- add docs description
- add docs description
- add docs description
```

```example6
[style] style code
- style code description
- style code description
- style code description
```

```example7
[chore] chore
- chore description
- chore description
- chore description
```




---

## ✅ 최종 디렉토리 구조 

```bash
kiwoom-rest-api/
└── src/
    └── kiwoom_rest_api/
        ├── core/
        │   ├── __init__.py
        │   ├── base.py            # 공통 요청 핸들링
        │   ├── sync_client.py     # httpx 동기 클라이언트
        │   └── async_client.py    # httpx 비동기 클라이언트
        ├── auth/
        │   ├── __init__.py
        │   └── token.py           # access token 발급 관리
        ├── koreanstock/
        │   ├── __init__.py
        │   ├── stockinfo.py       # ka10001 ~ ka10100
        │   ├── investor.py        # 투자자 기관별 데이터
        │   ├── trading.py         # 거래원, 체결
        │   └── analysis.py        # 고저PER, 급등락, 매물대
        ├── cli/
        │   ├── __init__.py
        │   └── main.py            # Typer 기반 CLI
        ├── api.py                 # 동기용 KiwoomAPI
        ├── api_async.py           # 비동기용 KiwoomAPIAsync
        └── config.py              # base_url, 키 관리 등
```

---

### 📦 import 예시

```python
from kiwoom_rest_api.core.base import make_request
from kiwoom_rest_api.auth.token import get_access_token
from kiwoom_rest_api.koreanstock.stockinfo import get_basic_stock_info
```

---

### 🧩 poetry 설정에서 CLI 추가

```toml
[tool.poetry.scripts]
kiwoom = "kiwoom_rest_api.cli.main:app"
```

---


